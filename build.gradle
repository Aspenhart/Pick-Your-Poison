plugins {
	id 'fabric-loom' version '0.11-SNAPSHOT'
	id 'maven-publish'
}

loom {
	accessWidenerPath = file("src/main/resources/pickyourpoison.accesswidener")
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
	maven {
		name = 'Ladysnake Mods'
		url = 'https://ladysnake.jfrog.io/artifactory/mods'
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation 'software.bernie.geckolib:geckolib-fabric-1.18:3.0.32'

	modImplementation "io.github.ladysnake:satin:1.7.2"
	include "io.github.ladysnake:satin:1.7.2"

	// Adds a dependency on the base cardinal components module (required by every other module)
	// Replace modImplementation with modApi if you expose components in your own API
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:4.1.3"
	// Adds a dependency on a specific module
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:4.1.3"
	// Includes Cardinal Components API as a Jar-in-Jar dependency (optional)
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-base:4.1.3"
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-entity:4.1.3"

	implementation 'org.json:json:20211205'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}


task checkGitStatus() {
	group = 'publishing'
	description = 'Checks that the git repository is in a state suitable for release'
	doLast {
		if (grgit == null) throw new RuntimeException('No git repository')
		if (!grgit.status().isClean()) {
			throw new RuntimeException("Git repository not ready for release (${grgit.status()})")
		}
		def currentBranch = grgit.branch.current().getName()
		grgit.fetch()
		if (grgit.tag.list().any { it.name == project.version }) {
			throw new RuntimeException("A tag already exists for ${project.version}")
		}
		def status = grgit.branch.status(name: currentBranch)
		if (status.aheadCount != 0) {
			throw new RuntimeException('Some commits have not been pushed')
		}
		if (status.behindCount != 0) {
			throw new RuntimeException('Some commits have not been pulled')
		}
	}
}

githubRelease {
	repo "Pick Your Poison"
	token "${getProjectProperty('github_releases_token')}"
	// default owner: last component of maven group
	// default repo: name of the project
	tagName = project.version
	targetCommitish = { grgit.branch.current().name }
	body = { project.getChangelogText() }

	FilenameFilter filter = { dir, filename -> filename.contains(project.version) && !filename.contains('-dev.jar') }
	releaseAssets = { jar.destinationDirectory.asFile.get().listFiles filter }
}
tasks.githubRelease.dependsOn(checkGitStatus)

curseforge {

	if (project.getProjectProperty('curse_key') != null) {
		apiKey = project.getProjectProperty('curse_key')
	}

	if (project.hasProperty('curseforge_id')) {
		project {
			id = findProperty('curseforge_id')

			releaseType = project.release_type

			//usually automatically determined by the CurseGradle plugin, but won't work with fabric
			"${project.curseforge_versions}".split('; ').each {
				addGameVersion it
			}
			addGameVersion 'Fabric'

			mainArtifact(remapJar) {
				displayName = "${project.name}-${project.version}.jar"

				if (project.hasProperty('cf_requirements') || project.hasProperty('cf_optionals') || project.hasProperty('cf_embeddeds') || project.hasProperty('cf_tools') || project.hasProperty('cf_incompatibles') || project.hasProperty('cf_includes')) {
					relations {
						if (project.hasProperty('cf_requirements')) {
							"${project.cf_requirements}".split('; ').each {
								requiredDependency "${it}"
							}
						}
						if (project.hasProperty('cf_optionals')) {
							"${project.cf_optionals}".split('; ').each {
								optionalDependency "${it}"
							}
						}
						if (project.hasProperty('cf_embeddeds')) {
							"${project.cf_embeddeds}".split('; ').each {
								embeddedLibrary "${it}"
							}
						}
						if (project.hasProperty('cf_tools')) {
							"${project.cf_tools}".split('; ').each {
								tool "${it}"
							}
						}
						if (project.hasProperty('cf_incompatibles')) {
							"${project.cf_incompatibles}".split('; ').each {
								incompatible "${it}"
							}
						}
						if (project.hasProperty('cf_includes')) {
							"${project.cf_includes}".split('; ').each {
								include "${it}"
							}
						}
					}
				}
			}

			changelogType = 'markdown'
			changelog = project.getChangelogText()

			afterEvaluate {
				uploadTask.dependsOn remapSourcesJar
			}
		}
		options {
			forgeGradleIntegration = false
		}
	}
}

tasks.curseforge.dependsOn(checkGitStatus)

task release(dependsOn: [tasks.githubRelease, tasks.curseforge]) {
	group = 'publishing'
	description = 'Releases a new version to Github and Curseforge'
}